from __future__ import annotations

from pathlib import Path
from torch.utils.data import DataLoader, Dataset
import torch
import numpy as np
import pytorch_lightning as pl


class CSVLOBDataset(Dataset):
    """Simple dataset reading a CSV generated by the downloader."""

    def __init__(self, csv_path: Path, window: int = 10):
        if not csv_path.exists():
            raise FileNotFoundError(csv_path)
        data = np.loadtxt(csv_path, delimiter=",")
        self.x = torch.tensor(data[:, :-1], dtype=torch.float32)
        self.y = torch.tensor(data[:, -1], dtype=torch.long)
        self.window = window
        feature_size = window * 30
        if self.x.shape[1] != feature_size:
            raise ValueError(f"Expected {feature_size} features")

    def __len__(self) -> int:
        return len(self.y)

    def __getitem__(self, idx: int) -> tuple[torch.Tensor, torch.Tensor]:
        raw_x = self.x[idx]
        x = raw_x.view(self.window, 30)
        y = self.y[idx]
        return x, y


class LOBDataModule(pl.LightningDataModule):
    def __init__(self, data_dir: str, batch_size: int = 4, window: int = 10):
        super().__init__()
        self.data_dir = Path(data_dir)
        self.batch_size = batch_size
        self.window = window
        self.csv_file = self.data_dir / "sample.csv"
        if not self.csv_file.exists():
            raise FileNotFoundError(self.csv_file)

    def setup(self, stage: str | None = None) -> None:
        self.train_ds = CSVLOBDataset(self.csv_file, window=self.window)
        self.val_ds = CSVLOBDataset(self.csv_file, window=self.window)

    def train_dataloader(self) -> DataLoader:
        return DataLoader(self.train_ds, batch_size=self.batch_size)

    def val_dataloader(self) -> DataLoader:
        return DataLoader(self.val_ds, batch_size=self.batch_size)
